#!/bin/bash

# Author: Elie SAINT-FELIX (alias Doc_Tiebeau)
# License: GPL-V3.0 https://github.com/Doc-Tiebeau/bashmodules

#Author: 	ESF
#Date:		201712

declare -gr LOGTHIS_VERSION=2.3
declare -gr LOGTHIS_REVISION=3

function LogThis_help()
{
	echo -e "
LogThis version $LOGTHIS_VERSION

Usage:

Declare LOGFILE variable in your script to write logs.
Declare LOGLEVEL variable in your script with default value 0.

If you want, set logging level as described as below:

  \$1: Logging level where message is printed <optional>
    Logging Levels:
    0:  Production Level
    1:  Technical Level
    2:  Verbose Level
    3:  Debug Level

  \$2: Logging criticity where message is printed:

  	Note: This parameter is mandatory if Loglevel is settted in \$1.
    
    Logging Criticity:
    0:  Info Log
    1:  Warning log
    2:  Critical log
    3:  PANIC !!! (for crash output only)

  \$3: Logging message to print

Info: This function is called in $(pwd)/$(basename "$(echo "$0")").
"
	exit 0
}

function LogThis_badarg()
{
	echo -e "Bad argument \"$1\" in LogThis() call:\n"
	LogThis_help
	exit 1
}


function LogThis()
{

	declare	LOGLEVELS=(PROD TECH VERBOSE DEBUG)
	declare CRITICITY=(INFO WARNING CRITICAL PANIC)

	if [[ -z $LOGLEVEL ]];then
		{
			LOGLEVEL=0
		};fi
		
	if [[ -z $LOGFILE ]];then
		{
			echo -e "[ERROR]: \$LOGFILE not declared in main program.\n"
			LogThis_help
		}
	elif [[ -z "$1" ]];then
		{
			LogThis_badarg $1
		}
	elif ! [[ "$1" =~ ^-?[0-9]+$ ]] && [[ -n $2 ]];then
		{
			echo -e "Wrong log level \"$1\" for message \"$2\" in LogThis() call:\n"
			LogThis_help
			exit 1
		}
	elif [[ ${1} =~ ^-?[0-9]+$ ]] && [[ ${2} =~ ^-?[0-9]+$ ]];then
		{
			if [[ "$1" -gt 3 ]];then
				{
					LogThis_badarg $1
				}
			elif [[ "$2" -gt 3 ]];then
				{
					LogThis_badarg $2
				}
			elif [[ $LOGLEVEL -ge $1 ]];then
				{
					echo -e "$(date '+%Y%m%d')_$(date '+%H%M%S'): LogLevel ${LOGLEVELS[$1]}: Criticity [${CRITICITY[$2]}]: $3" >>$LOGFILE
				}
			else
				{
					LogThis_badarg "both"
				};fi

		}
	else
		{ #Good implicit Log Level
			echo -e "$(date '+%Y%m%d')_$(date '+%H%M%S'): LogLevel ${LOGLEVELS[$2]}: Criticity [${CRITICITY[0]}]: $1" >>$LOGFILE
		}; fi
}